package npcgen

import (
	"encoding/json"
	"fmt"
)

//NPC is the overall container for a non-player character generated by npcgen package
type NPC struct {
	HitPoints        DiceFunction `json:"-"`
	BaseStatBlock    StatBlock
	ProficiencyBonus int

	Race RaceTraits
}

//ACMod is for modif
type ACMod struct {
	Set      int //Sets base AC of character to this value
	Addition int //Adds this to character's AC no questions asked

	AddMaxAbilityScores AbilityScores //Allows up to this much of each abilityScore to be added to the character's AC, -1 for infinite
}

//AC returns the final AC of the character
func (n NPC) AC() int {
	return 10 //TODO
}

//HP returns the final max hitpoints of the character
func (n NPC) HP() DiceFunction {
	t := n.HitPoints
	t.Constant += len(n.HitPoints.Dice) * n.StatBlock().Con.Modifier() //TODO: make more efficient by caching n.StatBlock()?
	return t
}

//StatBlock returns the final statblock of the character (combining all other statblocks)
func (n NPC) StatBlock() StatBlock {
	s := n.BaseStatBlock
	s = CombineStatBlocks(s, n.Race.StatBlockMods)
	//TODO: iterate through items
	return s
}

//SpellSaveDC returns the spell save DC for a caster. If the NPC cannot cast, the minimum value is returned
func (n NPC) SpellSaveDC() int {
	return 0 //TODO
}

//SpellAttackModifier returns the spell attack modiifer for a caster. If the NPC cannot cast, the minimum value is returned.
func (n NPC) SpellAttackModifier() int {
	return 0 //TODO
}

//StrAttackModifier returns the strength-based attack modifier for an npc.
func (n NPC) StrAttackModifier() int {
	return 0 //TODO
}

//DexAttackModifier returns the dexterity-based attack modifier for an npc.
func (n NPC) DexAttackModifier() int {
	return 0 //TODO
}

//GetAllActions returns all Actions that a NPC can do
func (n NPC) GetAllActions() []Action {
	return nil //TODO
}

//GetAllReactions returns all Actions that a NPC can do
func (n NPC) GetAllReactions() []Action {
	return nil //TODO
}

//GetAllFeatures returns all Features that a NPC can do
func (n NPC) GetAllFeatures() []Feature {
	return nil //TODO
}

func (n NPC) String() string {
	h := n.HP()
	s := fmt.Sprintf("Name: %s\nRace: %s\nHP: %s\nAC: %d\n\n\n", "Bandit Captain", "Human", h.String(), n.AC())
	j, _ := json.MarshalIndent(n, "", "\t")
	s += string(j)
	return s
}
